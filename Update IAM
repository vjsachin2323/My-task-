ðŸ“„ HLD â€“ AWS IAM Users, Groups, Roles, and Permissions

1. Purpose

To design a secure and scalable IAM model that provides least-privilege access, enforces RBAC, and integrates AWS accounts with the enterprise Identity Provider (Azure AD / Entra ID).

â¸»

2. Audience
	â€¢	Cloud Security Engineers
	â€¢	DevOps Engineers
	â€¢	Application Owners
	â€¢	Compliance & Audit Team

â¸»

3. Introduction

AWS IAM will be used for roles, groups, and permissions, while all user identities come from Azure AD through AWS SSO / IAM Identity Center. IAM users will only exist for service accounts and emergency access.

â¸»

4. Architecture & Design
	â€¢	Identity Source: Azure AD (federated to AWS SSO).
	â€¢	IAM Users: Limited to service accounts; MFA enforced.
	â€¢	IAM Groups: Developers, Auditors, Admins.
	â€¢	IAM Roles: Service roles (EC2 â†’ S3, Lambda â†’ DynamoDB), Cross-account roles, Federated roles mapped from Azure AD groups.
	â€¢	Policies: JSON-based least-privilege, managed via Terraform.
	â€¢	Monitoring: CloudTrail + AWS Config track all IAM changes.

â¸»

5. List of Components & Services
	â€¢	Azure AD / Entra ID â€“ Enterprise identity provider.
	â€¢	AWS IAM Identity Center (SSO) â€“ Federation + role mapping.
	â€¢	IAM Users â€“ Only service accounts (CI/CD, automation).
	â€¢	IAM Groups â€“ Logical groupings for RBAC.
	â€¢	IAM Roles â€“ Cross-account, service-specific, and federated roles.
	â€¢	IAM Policies â€“ Managed policies stored in Terraform.
	â€¢	CloudTrail + Config â€“ Logging & compliance monitoring.
	â€¢	KMS â€“ To encrypt IAM user credentials (if stored in Secrets Manager).

â¸»

6. Screenshots (to include in doc)
	â€¢	AWS IAM Console: Roles, Groups, and Policies view.
	â€¢	AWS SSO configuration with Azure AD mapping.
	â€¢	Example IAM Policy JSON snippet in AWS Console.
	â€¢	CloudTrail event showing IAM activity.

â¸»

7. Observability (Backup & Restore)
	â€¢	IAM Config Backup: Terraform as source of truth for all IAM entities (roles, policies, groups).
	â€¢	CloudTrail Logs: Centralized in the Log account, encrypted with KMS.
	â€¢	Backup Strategy:
	â€¢	Daily export of IAM roles & policies (Terraform state + AWS Config snapshots).
	â€¢	Secrets Manager stores IAM user access keys (encrypted).
	â€¢	Restore Strategy:
	â€¢	Recreate IAM roles/policies from Terraform repo.
	â€¢	Restore user/service credentials from Secrets Manager.
	â€¢	Validate restored entities using AWS Config compliance reports.

â¸»

8. Common Services
	â€¢	AWS Config â€“ Continuous compliance check (MFA enabled, key rotation enforced).
	â€¢	CloudTrail â€“ Track IAM API calls and role assumption.
	â€¢	GuardDuty â€“ Detect suspicious IAM activity.
	â€¢	Security Hub â€“ Centralized compliance findings.
	â€¢	Access Analyzer â€“ Detects overly permissive IAM policies.
	â€¢	Secrets Manager â€“ Stores service account credentials.
